
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    }
}

group 'com.andcup.hades.hts'
version '1.0.1-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.7
targetCompatibility = 1.7

/**
 * 仓库配置
 * */
apply from: rootProject.file('buildsystem/hts-repositories.gradle')

/**
 * 依赖库配置
 * */
apply from: rootProject.file('buildsystem/hts-dependencies.gradle')

/**
 * Jetty服务器配置
 * */
//apply from: rootProject.file('buildsystem/run/hts-jetty.gradle')

/**
 * 简易服务器配置
 * */
apply from: rootProject.file('buildsystem/run/hts-boot.gradle')

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile "junit:junit:4.11"

//    def spring = rootProject.ext.spring
//    compile spring.webMVC
//    compile spring.bootJpa

    def libs = rootProject.ext.libs
//    compile libs.servlet
//    compile libs.servletApi
//    compile libs.hibernate
//    compile libs.hibernateValidator
    compile libs.jacksonDatabind
    compile libs.rxJava

    def log = rootProject.ext.log

    compile log.slf4jApi
    compile log.logbackCore
    compile log.logbackClassic

    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'org.zeroturnaround:zt-zip:1.9'
    compile 'commons-net:commons-net:3.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'com.andcup.java.lib.command:lib-command:1.0.0-SNAPSHOT'
    compile 'com.andcup.java.lib.http-server:lib-http-server:1.0.0-SNAPSHOT'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.3.1'

}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }

    generatedFilesBaseDir = "$projectDir/src/"

    generateProtoTasks {
        all().each { task ->
            // Here you can configure the task
        }
        ofSourceSet('main')
    }
}

sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/main/protobuf'
            srcDir 'src/main/protocolbuffers'
            // In addition to the default '**/*.proto' (use with caution).
            // Using an extension other than 'proto' is NOT recommended,
            // because when proto files are published along with class files, we can
            // only tell the type of a file from its extension.
            include '**/*.protodevel'
        }
        java {
        }
    }
}
